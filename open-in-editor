#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
This code is all in one file, and supports Python 2, in order that it can be wrapped conveniently
as a MacOS application bundle (e.g. using https://github.com/sveinbjornt/Platypus).
"""
from __future__ import print_function
import datetime
import os
import subprocess
import sys

try:
    from urllib.parse import urlparse
except ImportError:
    # Python 2
    from urlparse import urlparse

LOGFILE = "/tmp/open-in-editor.log"


def main():
    try:
        editor = BaseEditor.infer_from_environment_variables()
        (url,) = sys.argv[1:]
        path, line, column = parse_url(url)
        log_debug("path=%s line=%s column=%s" % (path, line, column))
        editor.visit_file(path, line or 1, column or 1)
    except Exception:
        from traceback import format_exc

        log_error(format_exc())
        sys.exit(1)


def parse_url(url):  # type: (str) -> (str, Optional[int], Optional[int]):
    """
    Parse a file-like URL into path, line, and column.

    >>> parse_url("file:///a/b/myfile.txt")
    ('/a/b/myfile.txt', None, None)

    >>> parse_url("file-line-column:///a/b/myfile.txt")
    ('/a/b/myfile.txt', None, None)

    >>> parse_url("file:///a/b/myfile.txt:7")
    ('/a/b/myfile.txt', 7, None)

    >>> parse_url("file:///a/b/myfile.txt:7:77")
    ('/a/b/myfile.txt', 7, 77)

    >>> parse_url("file://localhost/a/b/myfile.txt:7:77")
    ('/a/b/myfile.txt', 7, 77)
    """
    path, _, line_and_column = urlparse(url).path.partition(":")
    line, _, column = line_and_column.partition(":")
    try:
        line = int(line)
    except ValueError:
        line = None
    try:
        column = int(column)
    except ValueError:
        column = None
    return path, line, column


def log_error(line):
    time = datetime.datetime.now().isoformat(" ").split(".")[0]
    with open(LOGFILE, "a") as fp:
        print(time, file=fp)
        print(line, file=fp)
        print("\n", file=fp)
        fp.flush()

def log_debug(line):
    pass


class BaseEditor(object):
    """
    Abstract base class for editors.
    """

    @classmethod
    def infer_from_environment_variables(cls):
        """
        Infer the editor type and its executable path heuristically from environment variables.
        """
        OPEN_IN_EDITOR, EDITOR = os.getenv("OPEN_IN_EDITOR"), os.getenv("EDITOR")
        executable_path_with_arguments_maybe = OPEN_IN_EDITOR or EDITOR
        # 'Apps/VS Code - In.app/app/bin/code -arg'
        # ↓ up to last /     = '/Apps/VS Code - In.app/app/bin'
        path_head, path_tail = os.path.split(executable_path_with_arguments_maybe)
        # after the last / ↑ = 'code -arg'
        path_bin = path_tail.split(' -')[0].strip() # remove ' -args' = 'code'
        path_head = path_head + os.sep if path_head else path_head # add / back if it existed
        executable_path = path_head + path_bin

        editors = [Emacs, Sublime, PyCharm, VSCode, Vim, Helix, O]

        inferred_editor = next((ed for ed in editors if path_bin == ed.executable_name), None)
        if inferred_editor is None:
            log_error(
                "ERROR: failed to infer your editor. "
                "The values of the relevant environment variables are: "
                "OPEN_IN_EDITOR=%s and EDITOR=%s. "
                "I was expecting one of these to contain one of the following substrings: "
                "emacsclient, subl, charm, code, vim."
                % (OPEN_IN_EDITOR, EDITOR)
            )
            sys.exit(1)
        return inferred_editor(executable_path)

    def __init__(self, executable):
        self.executable = executable

    def visit_file(self, path, line, column):
        raise NotImplementedError()


class Emacs(BaseEditor):
    executable_name = 'emacsclient'
    def visit_file(self, path, line, column):
        cmd = [
            self.executable,
            "--no-wait",
            "--eval",
            '(find-file "%s")' % path,
            "--eval",
            "(goto-line %d)" % line,
            "--eval",
            "(recenter-top-bottom)",
            "--eval",
            "(select-frame-set-input-focus (selected-frame))",
            "--eval",
            "(when (functionp 'pulse-momentary-highlight-one-line)"
            " (let ((pulse-delay 0.05)) (pulse-momentary-highlight-one-line (point) 'highlight)))",
        ]
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


class PyCharm(BaseEditor):
    executable_name = 'charm'
    def visit_file(self, path, line, column):
        cmd = [self.executable, "--line", str(line), path]
        log_debug(" ".join(cmd))
        subprocess.check_call([s.encode("utf-8") for s in cmd])


class Sublime(BaseEditor):
    executable_name = 'subl'
    def visit_file(self, path, line, column):
        cmd = [self.executable, "%s:%s:%s" % (path, line, column)]
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


class VSCode(BaseEditor):
    executable_name = 'code'
    def visit_file(self, path, line, column):
        cmd = [self.executable, "-g", "%s:%s:%s" % (path, line, column)]
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


class Vim(BaseEditor):
    executable_name = 'vim'
    def visit_file(self, path, line, column):
        cmd = [self.executable, "+%s" % str(line)]
        cmd.extend(["-c", "normal %sl" % str(column - 1), path] if column > 1 else [path])
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


class Helix(BaseEditor):
    executable_name = 'hx'
    def visit_file(self, path, line, column):
        cmd = [self.executable, "%s:%s:%s" % (path, line, column)]
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


class O(BaseEditor):
    executable_name = 'o'
    def visit_file(self, path, line, column):
        cmd = [self.executable, path, "+%s" % str(line), "+%s" % str(column)]
        log_debug(" ".join(cmd))
        subprocess.check_call(cmd)


if __name__ == "__main__":
    main()
